# NGINX configured to work as a reverse proxy for a Flask app.
proxy_cache_path /tmp/cache levels=1:2 keys_zone=cache:10m max_size=500m inactive=60m use_temp_path=off;

upstream flask {
  # Docker Compose creates a DNS for services in the same network (e.g.: flask)
  # server flask:5000;

  # AWS ECS
  server 0.0.0.0:5000;

  # AWS ECS (with service connect)
  # server flask-service:5000;
}

proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Host $server_name;

server {
  listen 80;
  # ECS Error: nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied)
  # occurs because non-root users typically don't have the permission to bind to privileged ports
  # (those below 1024, including port 80). To resolve this issue:
  # - Use a non-privileged port: Change the port NGINX is listening on to a non-privileged port (e.g., port 8080).
  # listen 8080;
  # - Adjust Dockerfile and docker-compose.yml to reflect the new port.

  # The location / {} block will catch all URLs starting from /, so any requests to /upload, /files,
  # or any other URL will be passed to your Flask app.
  location / {
    proxy_pass http://flask; # forwards all these requests to your upstream Flask server.
    proxy_redirect off;
  }

  # To differentiate from the Flask App health check
  location /nginx-health-check {
    add_header Content-Type text/plain;
    return 200 "success";
  }
}