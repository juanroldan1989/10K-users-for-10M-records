version: "3.8"

services:
  db:
    image: postgres:13
    container_name: db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  data-populator:
    build:
      context: .
      dockerfile: data-populator/Dockerfile
    container_name: data-populator
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
      BATCH_SIZE: 1000
      TOTAL_RECORDS: 10000
    networks:
      - my_network
    depends_on:
      db:
        condition: service_healthy

  data-query:
    build:
      context: .
      dockerfile: data-query/Dockerfile
    container_name: data-query
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
    networks:
      - my_network
    depends_on:
      db:
        condition: service_healthy
      data-populator:
        condition: service_completed_successfully

  flask:
    build:
      context: .
      dockerfile: flask/Dockerfile
    container_name: flask
    environment:
      FLASK_ENV: development
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
    ports:
      - "5000:5000"
    networks:
      - my_network
    depends_on:
      db:
        condition: service_healthy
      data-populator:
        condition: service_completed_successfully
      data-query:
        condition: service_completed_successfully

volumes:
  postgres_data:

networks:
  my_network:
