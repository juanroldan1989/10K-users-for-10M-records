version: "3.8"

services:
  db:
    image: postgres:13
    container_name: db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backnet
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--loglevel", "verbose"]

  data-populator:
    build:
      context: .
      dockerfile: data-populator/Dockerfile
    container_name: data-populator
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
      BATCH_SIZE: 1000
      TOTAL_RECORDS: 10000
    networks:
      - backnet
    depends_on:
      db:
        condition: service_healthy

  data-query:
    build:
      context: .
      dockerfile: data-query/Dockerfile
    container_name: data-query
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
    networks:
      - backnet
    depends_on:
      db:
        condition: service_healthy
      data-populator:
        condition: service_completed_successfully

  flask:
    build:
      context: .
      dockerfile: flask/Dockerfile
    container_name: flask
    environment:
      FLASK_ENV: development
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
      USE_POOLING: "true"
      POOL_MINCONN: 5
      POOL_MAXCONN: 15
      CACHE: "true"
      CACHE_EXPIRY: 300
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5000"
    networks:
      - backnet
      - frontnet
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      data-populator:
        condition: service_completed_successfully
      data-query:
        condition: service_completed_successfully
    healthcheck:
      test:
        ["CMD-SHELL", "curl --silent --fail localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3

  flask_replica_1:
    build:
      context: .
      dockerfile: flask/Dockerfile
    container_name: flask_replica_1
    environment:
      FLASK_ENV: development
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
      USE_POOLING: "true"
      POOL_MINCONN: 5
      POOL_MAXCONN: 15
      CACHE: "true"
      CACHE_EXPIRY: 300
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5000"
    networks:
      - backnet
      - frontnet
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      data-populator:
        condition: service_completed_successfully
      data-query:
        condition: service_completed_successfully
    healthcheck:
      test:
        ["CMD-SHELL", "curl --silent --fail localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3

  flask_replica_2:
    build:
      context: .
      dockerfile: flask/Dockerfile
    container_name: flask_replica_2
    environment:
      FLASK_ENV: development
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_DB: mydb
      USE_POOLING: "true"
      POOL_MINCONN: 5
      POOL_MAXCONN: 15
      CACHE: "true"
      CACHE_EXPIRY: 300
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5000"
    networks:
      - backnet
      - frontnet
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      data-populator:
        condition: service_completed_successfully
      data-query:
        condition: service_completed_successfully
    healthcheck:
      test:
        ["CMD-SHELL", "curl --silent --fail localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: nginx
    restart: always
    ports:
      - "8000:80"
    networks:
      - frontnet
    depends_on:
      - flask
      - flask_replica_1
      - flask_replica_2

volumes:
  postgres_data:

networks:
  backnet:
  frontnet:
